#!/usr/bin/env pwsh
# Script para corrigir problemas da aplica√ß√£o Whosfy

Write-Host "üîß Iniciando corre√ß√£o da aplica√ß√£o Whosfy..." -ForegroundColor Green

# 1. Verificar se estamos no diret√≥rio correto
if (!(Test-Path "apps/web/package.json")) {
    Write-Host "‚ùå Erro: Execute este script na raiz do projeto studio-master" -ForegroundColor Red
    exit 1
}

# 2. Limpar cache e depend√™ncias
Write-Host "üßπ Limpando cache e depend√™ncias..." -ForegroundColor Yellow
Remove-Item -Recurse -Force "node_modules" -ErrorAction SilentlyContinue
Remove-Item -Recurse -Force "apps/web/node_modules" -ErrorAction SilentlyContinue
Remove-Item -Recurse -Force "apps/web/.next" -ErrorAction SilentlyContinue
Remove-Item -Force "pnpm-lock.yaml" -ErrorAction SilentlyContinue

# 3. Reinstalar depend√™ncias
Write-Host "üì¶ Reinstalando depend√™ncias..." -ForegroundColor Yellow
pnpm install

if ($LASTEXITCODE -ne 0) {
    Write-Host "‚ùå Erro ao instalar depend√™ncias" -ForegroundColor Red
    exit 1
}

# 4. Verificar vari√°veis de ambiente
Write-Host "üîç Verificando vari√°veis de ambiente..." -ForegroundColor Yellow
$envFile = "apps/web/.env"
if (!(Test-Path $envFile)) {
    Write-Host "‚ùå Arquivo .env n√£o encontrado em apps/web/" -ForegroundColor Red
    exit 1
}

$envContent = Get-Content $envFile
$hasSupabaseUrl = $envContent | Where-Object { $_ -match "NEXT_PUBLIC_SUPABASE_URL=" }
$hasSupabaseKey = $envContent | Where-Object { $_ -match "NEXT_PUBLIC_SUPABASE_ANON_KEY=" }

if (!$hasSupabaseUrl -or !$hasSupabaseKey) {
    Write-Host "‚ùå Vari√°veis de ambiente do Supabase n√£o configuradas" -ForegroundColor Red
    exit 1
}

Write-Host "‚úÖ Vari√°veis de ambiente configuradas" -ForegroundColor Green

# 5. Build da aplica√ß√£o
Write-Host "üèóÔ∏è Fazendo build da aplica√ß√£o..." -ForegroundColor Yellow
Set-Location "apps/web"
pnpm build

if ($LASTEXITCODE -ne 0) {
    Write-Host "‚ùå Erro no build da aplica√ß√£o" -ForegroundColor Red
    Set-Location "../.."
    exit 1
}

Set-Location "../.."
Write-Host "‚úÖ Build conclu√≠do com sucesso" -ForegroundColor Green

# 6. Testar a aplica√ß√£o localmente
Write-Host "üß™ Testando aplica√ß√£o localmente..." -ForegroundColor Yellow
Write-Host "Para testar localmente, execute: cd apps/web; pnpm start" -ForegroundColor Cyan

# 7. Verificar se o Dockerfile est√° correto
Write-Host "üê≥ Verificando Dockerfile..." -ForegroundColor Yellow
if (!(Test-Path "Dockerfile")) {
    Write-Host "‚ùå Dockerfile n√£o encontrado" -ForegroundColor Red
    exit 1
}

Write-Host "‚úÖ Dockerfile encontrado" -ForegroundColor Green

# 8. Instru√ß√µes finais
Write-Host ""
Write-Host "üéâ Corre√ß√£o da aplica√ß√£o conclu√≠da!" -ForegroundColor Green
Write-Host ""
Write-Host "üìã Pr√≥ximos passos:" -ForegroundColor Cyan
Write-Host "1. Teste localmente: cd apps/web; pnpm start" -ForegroundColor White
Write-Host "2. Acesse http://localhost:3000 para verificar se est√° funcionando" -ForegroundColor White
Write-Host "3. Acesse http://localhost:3000/api/health para verificar o health check" -ForegroundColor White
Write-Host "4. Se tudo estiver funcionando, fa√ßa o deploy no Coolify" -ForegroundColor White
Write-Host ""
Write-Host "üîß Para resolver o status 'unhealthy' no Coolify:" -ForegroundColor Cyan
Write-Host "1. Acesse o painel do Coolify" -ForegroundColor White
Write-Host "2. V√° para a aplica√ß√£o m-bento7/studio:main" -ForegroundColor White
Write-Host "3. Habilite o Health Check com as configura√ß√µes:" -ForegroundColor White
Write-Host "   - M√©todo: GET" -ForegroundColor White
Write-Host "   - Path: /api/health" -ForegroundColor White
Write-Host "   - Porta: 3000" -ForegroundColor White
Write-Host "   - Timeout: 5 segundos" -ForegroundColor White
Write-Host "   - Retries: 3" -ForegroundColor White
Write-Host ""